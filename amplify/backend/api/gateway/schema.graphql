# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
type User
    @model
    @key(
        name: "UserByAddress"
        fields: ["wallet"]
        queryField: "getUserByAddress"
    )
    @key(
        name: "UserByUsername"
        fields: ["username"]
        queryField: "getUserByUsername"
    )
    @searchable {
    id: ID!
    wallet: String!
    username: String
    name: String
    bio: String
    daos_ids: [String]
    daos: [DAO] @function(name: "getUserDAOs-${env}")
    init: Boolean
    nonce: Int!
    pfp: String
    socials: [Social]
    createdAt: AWSDateTime
}

type DAO
    @model
    @key(name: "DAOById", fields: ["dao"], queryField: "getDAOById")
    @key(name: "DAOByName", fields: ["name"], queryField: "getDAOByName") 
    @searchable {
    id: ID!
    dao: String!
    name: String!
    faq: [FAQ]
    accomplishments: String
    backgroundURL: AWSURL!
    logoURL: AWSURL!
    bounties: [Bounty]
    categories: [String]!
    tags: [String]
    description: String!
    howToJoin: [String]
    missionAndVision: String
    whatDoWeDo: [String]
    tokenBenefits: [TokenBenefit]
    upcomingHangouts: String
    tokenAddress: String
    whitelistedAddresses: [String!]
    socials: [Social]
    channels: [Channel] @connection(keyName: "channelByDAO", fields: ["id"])
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

type FAQ {
    question: String!
    answer: String!
}

type Bounty {
    headline: String!
    description: String
    level: String!
    categories: [String]!
    reward: String!
    directions: String
    links: [String]!
    endDate: AWSDateTime
    postDate: AWSDateTime!
}

type TokenBenefit {
    amount: String
    description: String!
    title: String!
    token: String
}

type Social {
    network: String!
    url: String!
}

type Channel @model @key(name: "channelByDAO", fields: ["daoID"]) {
    id: ID!
    name: String!
    daoID: ID!
    dao: DAO! @connection(fields: ["daoID"])
    posts: [Post] @connection(keyName: "postByChannelID", fields: ["id"])
}

type Post @model @key(name: "postByChannelID", fields: ["channelID"]) @searchable {
    id: ID!
    daoID: ID!
    dao: DAO @connection(fields: ["daoID"])
    channelID: ID
    channel: Channel @connection(fields: ["channelID"])
    userID: ID!
    user: User @connection(fields: ["userID"])
    content: String!
    comments: [Comment] @connection(keyName: "commentByPostID", fields: ["id"])
    upvotes: [ID!] # User IDs
}

type Comment @model @key(name: "commentByPostID", fields: ["postID"]) {
    id: ID!
    postID: ID!
    userID: ID!
    user: User @connection(fields: ["userID"])
    content: String!
    upvotes: [ID!] # User IDs
}

type Authentication {
    userId: String
    nonce: String
}

type Mutation {
    getAuthenticationNonce(wallet: String!): Authentication
        @function(name: "getAuthenticationNonce-${env}")
}