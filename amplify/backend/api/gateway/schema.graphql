# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
type User
    @model
    @key(
        name: "UserByAddress"
        fields: ["wallet"]
        queryField: "getUserByAddress"
    )
    @key(
        name: "UserByUsername"
        fields: ["username"]
        queryField: "getUserByUsername"
    )
    @searchable {
    id: ID!
    wallet: String!
    username: String
    name: String
    bio: String
    daos_ids: [String]
    daos: [DAO] @function(name: "getUserDAOs-${env}")
    init: Boolean
    nonce: Int!
    pfp: String
    socials: [Social]
    gates: [GateStatus]
        @connection(keyName: "gateStatusByUserID", fields: ["id"])
    tasks: [TaskStatus]
        @connection(keyName: "taskStatusByUserID", fields: ["id"])
    createdAt: AWSDateTime
}

type DAO
    @model
    @key(name: "DAOById", fields: ["dao"], queryField: "getDAOById")
    @key(name: "DAOByName", fields: ["name"], queryField: "getDAOByName")
    @searchable {
    id: ID!
    dao: String!
    name: String!
    faq: [FAQ]
    accomplishments: String
    snapshotID: String
    backgroundURL: AWSURL!
    youtubeURL: AWSURL
    logoURL: AWSURL!
    bounties: [Bounty] @connection(keyName: "bountyByDAO", fields: ["id"])
    categories: [String]!
    tags: [String]
    description: String!
    howToJoin: [String]
    missionAndVision: String
    whatDoWeDo: String
    tokenBenefits: [TokenBenefit]
        @connection(keyName: "tokenBenefitByDAO", fields: ["id"])
    upcomingHangouts: String
    tokenAddress: String
    whitelistedAddresses: [String!]
    socials: [Social]
    chains: [String]
    channels: [Channel] @connection(keyName: "channelByDAO", fields: ["id"])
    gates: [Gate] @connection(keyName: "gateByDAO", fields: ["id"])
    nftContracts: NFTContracts
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

type FAQ {
    question: String!
    answer: String!
}

type Bounty
    @model
    @key(
        name: "bountyByDAO"
        fields: ["daoID"]
        queryField: "getBountyByDAOID"
    ) {
    id: ID!
    daoID: ID!
    dao: DAO @connection(fields: ["daoID"])
    headline: String!
    description: String
    level: String!
    categories: [String]!
    reward: String!
    directions: String
    links: [String]!
    endDate: AWSDateTime
    postDate: AWSDateTime!
}

type TokenBenefit
    @model
    @key(
        name: "tokenBenefitByDAO"
        fields: ["daoID"]
        queryField: "getTokenBenefitByDAOID"
    ) {
    id: ID!
    daoID: ID!
    dao: DAO @connection(fields: ["daoID"])
    amount: String
    description: String!
    title: String!
    token: String
}

type Social {
    network: String!
    url: String!
}

type NFTContracts {
    reward: String
    contributor: String
}

type Channel
    @model
    @key(
        name: "channelByDAO"
        fields: ["daoID"]
        queryField: "getChannelByDAOID"
    ) {
    id: ID!
    name: String!
    daoID: ID!
    dao: DAO @connection(fields: ["daoID"])
    posts: [Post] @connection(keyName: "postByChannelID", fields: ["id"])
}

type Post
    @model
    @key(
        name: "postByChannelID"
        fields: ["channelID"]
        queryField: "getPostsByChannelID"
    )
    @searchable {
    id: ID!
    daoID: ID!
    dao: DAO @connection(fields: ["daoID"])
    channelID: ID
    channel: Channel @connection(fields: ["channelID"])
    userID: ID!
    user: User @connection(fields: ["userID"])
    content: String!
    comments: [Comment] @connection(keyName: "commentByPostID", fields: ["id"])
    upvotes: [ID!] # User IDs
    downvotes: [ID!]
    createdAt: AWSDateTime
}

type Comment
    @model
    @key(
        name: "commentByPostID"
        fields: ["postID"]
        queryField: "getCommentsByPostID"
    ) {
    id: ID!
    postID: ID!
    userID: ID!
    user: User @connection(fields: ["userID"])
    content: String!
    upvotes: [ID!] # User IDs
    downvotes: [ID!]
    createdAt: AWSDateTime
}

type Authentication {
    userId: String
    nonce: String
}

enum VoteType {
    UPVOTE
    DOWNVOTE
}

### GATES/KEYS ###

type Gate
    @model
    @key(name: "gateByDAO", fields: ["daoID"], queryField: "getGatesByDAOID")
    @searchable {
    id: ID!
    daoID: ID!
    dao: DAO @connection(fields: ["daoID"])
    name: String!
    description: String!
    categories: [String!]
    skills: [String!]
    knowledge: [String!]
    attitudes: [String!]
    admins: [ID]!
    keysNumber: Int
    keys: [Key] @connection(keyName: "keyByGateID", fields: ["id"])
    published: Published
    badge: NFTInfo!
    preRequisites: PreRequisites
    retroactiveEarners: [String!]
    links: [Link]!
    holders: Int! @function(name: "getGateHolders-${env}")
    nftType: NFTType
}

type Key
    @model
    @key(
        name: "keyByGateID"
        fields: ["gateID"]
        queryField: "getKeysByGateID"
    ) {
    id: ID!
    gateID: ID!
    gate: Gate @connection(fields: ["gateID"])
    information: [KeyInformation]!
    token: String # An ERC20 token to reward the users
    tokenAmount: Int
    keys: Int!
    unlimited: Boolean!
    peopleLimit: Int!
    task: TaskUnion
}

type Link {
    name: String!
    link: AWSURL!
}

type Quiz {
    type: TaskType
    title: String!
    description: String!
    questions: [Question]!
    passedAt: Int! # Number of questions to mark quiz as completed
}

type Question {
    question: String!
    options: [QuizOption]!
    nrOfCorrectAnswers: Int
}

type QuizOption {
    answer: String!
    correct: Boolean!
}

type MeetingCode {
    type: TaskType
    code: String!
    caseSensitive: Boolean!
}

type TokenHold {
    type: TaskType
    chainID: Int!
    address: String!
    amount: Int!
}

type SelfVerify {
    type: TaskType
}

type SnapshotGovernance {
    type: TaskType
    snapshotType: SnapshotType
    spaceID: String!
    proposal: String
}

type ContractInteraction {
    type: TaskType
    chainID: Int!
    address: String!
    methodName: String
}

type ManualTask {
    type: TaskType
    information: [KeyInformation]!
}

type PreRequisites {
    completedGates: [ID]
}

type NFTInfo {
    nftURL: AWSURL
    ipfsURL: String
    name: String!
}

type KeyInformation {
    title: String!
    description: String!
}

enum TaskType {
    QUIZ
    MEETING_CODE
    TOKEN_HOLD
    SC_INTERACTION
    SNAPSHOT
    MANUAL_TASK
    SELF_VERIFY
    SNAPSHOT_GOVERNANCE
    CONTRACT_INTERACTION
}

enum TokenType {
    ERC20
    ERC721
    ERC1151
}

enum SnapshotType {
    VOTE
    PROPOSAL
}

enum NFTType {
    CONTRIBUTOR
    REWARD
}

enum PUBLISHED {
    NOT_PUBLISHED
    PUBLISHED
    PAUSED
}

union TaskUnion =
      Quiz
    | MeetingCode
    | TokenHold
    | SelfVerify
    | SnapshotGovernance
    | ContractInteraction
    | ManualTask

### MANUAL TASK SUBMISSION ###

type ManualTaskSubmission @model @key(
        name: "manualTaskSubmissionByUserID"
        fields: ["userID"]
        queryField: "getManualTaskSubmissionByUserID"
    )

    @key(
        name: "manualTaskSubmissionByKeyID"
        fields: ["keyID"]
        queryField: "getManualTaskSubmissionByKeyID"
    ) {
        userID: ID!
        user: User @connection(fields: ["userID"])
        keyID: ID!
        key: Key @connection(fields: ["keyID"])
        submissionURL: AWSURL
        discordID: String
        wallet: String
        comment: String
}

### TASK STATUS / GATE STATUS / ERROR ###

type GateStatus
    @model
    @key(
        name: "gateStatusByUserID"
        fields: ["userID"]
        queryField: "getGateStatusByUserID"
    )
    @key(
        name: "gateStatusByGateID"
        fields: ["gateID"]
        queryField: "getGateStatusByGateID"
    ) {
    id: ID!
    userID: ID!
    user: User @connection(fields: ["userID"])
    gateID: ID!
    gate: Gate @connection(fields: ["gateID"])
    reward: GateReward
    tasks: [TaskStatus]
        @connection(keyName: "taskStatusByGateID", fields: ["gateID"])
    keysDone: Int @function(name: "getCompletedKeys-${env}")
    status: GateStatusList
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

type GateReward {
    rewardCode: String!
    retrieved: Boolean!
}

type TaskStatus
    @model
    @key(
        name: "taskStatusByUserID"
        fields: ["userID"]
        queryField: "getTaskStatusByUserID"
    )
    @key(
        name: "taskStatusByGateID"
        fields: ["gateID"]
        queryField: "getTaskStatusByGateID"
    )
    @key(
        name: "taskStatusByKeyID"
        fields: ["keyID"]
        queryField: "getTaskStatusByKeyID"
    ) {
    id: ID!
    userID: ID!
    user: User @connection(fields: ["userID"])
    gateID: ID!
    gate: Gate @connection(fields: ["gateID"])
    keyID: ID!
    key: Key @connection(fields: ["keyID"])
    completed: CompletedState
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

type Error {
    keyID: ID!
    error: ErrorType!
    msg: String
}

enum GateStatusList {
    NOT_STARTED
    IN_PROGRESS
    COMPLETED
}

enum ErrorType {
    INVALID_KEY
    NO_HOLD # for hold a token
    INVALID_CODE # for meeting code
    NOT_ENOUGH_RIGHTS # for quiz
    UNEXPECTED_ERROR
    INVALID_METHOD_NAME # for contract interaction
    NO_INTERACTION # for contract interaction
    NO_PROPOSAL # for snapshot proposal
    NO_VOTE # for snapshot proposal
    WRONG_TASK
    NO_MORE_SLOTS
}

enum CompletedState {
    DONE
    IN_REVIEW # for manual task
    NOT_DONE
}

### KEY VERIFICATION RESPONSE ###

type TaskAndGateResponse {
    id: ID!
    userID: ID!
    gateID: ID!
    keyID: ID!
    completed: Boolean!
    completedGate: Boolean!
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

union KeyVerificationResponse = TaskAndGateResponse | Error

### CERAMIC ###

type FetchCeramic {
    streamID: String!
    data: AWSJSON!
}

type StreamCeramic {
    streamed: Boolean!
    streamID: String!
    data: AWSJSON!
}

type CeramicError {
    error: Boolean!
    msg: String!
}

union FetchCeramicResponse = FetchCeramic | CeramicError
union StreamCeramicResponse = StreamCeramic | CeramicError

### SIGNATURES ###

type Signature {
    message: String!
    signature: String!
}

type SignatureError {
    error: Boolean!
    msg: String!
}

union SignatureResponse = Signature | SignatureError

### INPUTS ###

input CreateNewDAO {
    id: ID
    dao: String!
    name: String!
    snapshotID: String
    backgroundURL: AWSURL!
    youtubeURL: AWSURL
    logoURL: AWSURL!
    categories: [String]!
    tags: [String]
    description: String!
    tokenAddress: String
    whitelistedAddresses: [String!]
    socials: [SocialInput]
    chains: [String]
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
}

input SocialInput {
    network: String!
    url: String!
}

input CreateKeyQuiz {
    id: ID!
    gateID: ID!
    information: [KeyInformationInput]!
    token: String # An ERC20 token to reward the users
    tokenAmount: Int
    keys: Int!
    peopleLimit: Int! # 0 for unlimited
    unlimited: Boolean!
    task: QuizInput
}

input KeyInformationInput {
    title: String!
    description: String!
}

input QuizInput {
    type: TaskType = "QUIZ"
    title: String!
    description: String!
    questions: [QuestionInput]!
    passedAt: Int! # Number of questions to mark quiz as completed
}

input QuestionInput {
    question: String!
    options: [QuizOptionInput]!
    nrOfCorrectAnswers: Int
}

input QuizOptionInput {
    answer: String!
    correct: Boolean!
}

input CreateKeyMeetingCode {
    id: ID!
    gateID: ID!
    information: [KeyInformationInput]!
    token: String # An ERC20 token to reward the users
    tokenAmount: Int
    keys: Int!
    peopleLimit: Int! # 0 for unlimited
    unlimited: Boolean!
    task: MeetingCodeInput
}

input MeetingCodeInput {
    type: TaskType = "MEETING_CODE"
    code: String!
    caseSensitive: Boolean!
}

input CreateKeyTokenHold {
    id: ID!
    gateID: ID!
    information: [KeyInformationInput]!
    token: String # An ERC20 token to reward the users
    tokenAmount: Int
    keys: Int!
    peopleLimit: Int! # 0 for unlimited
    unlimited: Boolean!
    task: TokenHoldInput
}

input TokenHoldInput {
    type: TaskType = "TOKEN_HOLD"
    chainID: Int!
    address: String!
    amount: Int!
}

input CreateKeyContractInteraction {
    id: ID!
    gateID: ID!
    information: [KeyInformationInput]!
    token: String # An ERC20 token to reward the users
    tokenAmount: Int
    keys: Int!
    peopleLimit: Int! # 0 for unlimited
    unlimited: Boolean!
    task: ContractInteractionInput
}

input ContractInteractionInput {
    type: TaskType = "CONTRACT_INTERACTION"
    chainID: Int!
    address: String!
    methodName: String
}

input CreateKeySelfVerify {
    id: ID!
    gateID: ID!
    information: [KeyInformationInput]!
    token: String # An ERC20 token to reward the users
    tokenAmount: Int
    keys: Int!
    peopleLimit: Int! # 0 for unlimited
    unlimited: Boolean!
    task: SelfVerifyInput
}

input SelfVerifyInput {
    type: TaskType = "SELF_VERIFY"
}

input CreateKeySnapshotGovernance {
    id: ID!
    gateID: ID!
    information: [KeyInformationInput]!
    token: String # An ERC20 token to reward the users
    tokenAmount: Int
    keys: Int!
    peopleLimit: Int! # 0 for unlimited
    unlimited: Boolean!
    task: SnapshotGovernanceInput
}

input SnapshotGovernanceInput {
    type: TaskType = "SNAPSHOT_GOVERNANCE"
    snapshotType: SnapshotType
    spaceID: String!
    proposal: String
}

input QuestionLambdaInput {
    answers: [Int]!
    questionIdx: Int!
}

input CreateKeyManualTask {
    id: ID!
    gateID: ID!
    information: [KeyInformationInput]!
    token: String # An ERC20 token to reward the users
    tokenAmount: Int
    keys: Int!
    peopleLimit: Int! # 0 for unlimited
    unlimited: Boolean!
    task: ManualTaskInput
}

input ManualTaskInput {
    type: TaskType = "MANUAL_TASK"
    information: [KeyInformationInput]!
}

input UpdateKeyInput {
    id: ID!
    gateID: ID!
    information: [KeyInformationInput]!
    token: String # An ERC20 token to reward the users
    tokenAmount: Int
    keys: Int!
    peopleLimit: Int! # 0 for unlimited
    unlimited: Boolean!
    task: AWSJSON # this can be customized depending on the update needs
}

### CUSTOM QUERIES ###
type Query {
    fetchFromCeramic(streamID: String!, node: AWSURL): FetchCeramicResponse @function(name: "ceramic-${env}")
}

### CUSTOM MUTATIONS ###
type Mutation {
    getAuthenticationNonce(wallet: String!): Authentication
        @function(name: "getAuthenticationNonce-${env}")

    createDAOWithChannels(input: CreateNewDAO!): DAO
        @function(name: "addDAOAndChannels-${env}")

    votePost(postID: ID!, userID: ID!, type: VoteType!): Post
        @function(name: "vote-${env}")

    unvotePost(postID: ID!, userID: ID!, type: VoteType!): Post
        @function(name: "vote-${env}")

    ## For keys ##
    createQuiz(input: CreateKeyQuiz): Key @function(name: "key-${env}")

    createMeetingCode(input: CreateKeyMeetingCode): Key
        @function(name: "key-${env}")

    createTokenHold(input: CreateKeyTokenHold): Key
        @function(name: "key-${env}")

    createSnapshotGovernance(input: CreateKeySnapshotGovernance): Key
        @function(name: "key-${env}")

    createSelfVerify(input: CreateKeySelfVerify): Key
        @function(name: "key-${env}")

    createContractInteraction(input: CreateKeyContractInteraction): Key
        @function(name: "key-${env}")

    createManualTask(input: CreateKeyManualTask): Key
        @function(name: "key-${env}")

    updateKey(input: ): Key @function(name: "key-${env}")

    ## Verify keys ##
    verifyMeetingCode(
        userID: ID!
        keyID: ID!
        meetingCode: String!
    ): KeyVerificationResponse @function(name: "verifyMeetingCode-${env}")

    verifyHoldAToken(userID: ID!, keyID: ID!): KeyVerificationResponse
        @function(name: "verifyHoldAToken-${env}")

    verifyContractInteraction(userID: ID!, keyID: ID!): KeyVerificationResponse
        @function(name: "verifyContractInteraction-${env}")

    verifySnapshot(userID: ID!, keyID: ID!): KeyVerificationResponse
        @function(name: "verifySnapshot-${env}")

    verifySelfVerify(userID: ID!, keyID: ID!): KeyVerificationResponse
        @function(name: "verifySelfVerify-${env}")

    verifyQuiz(
        userID: ID!
        keyID: ID!
        questions: [QuestionLambdaInput]!
    ): KeyVerificationResponse @function(name: "verifyQuiz-${env}")

    ## Ceramic ##
    streamToCeramic(data: AWSJSON!,  node: AWSURL): StreamCeramicResponse @function(name: "ceramic-${env}")

    ## Signatures ##
    generateSignature(message: String!): SignatureResponse @function(name: "generateSignature-${env}")
    generatedNonceSignature: SignatureResponse @function(name: "generateSignature-${env}")
}
